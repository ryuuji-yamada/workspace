/***********************************************
  グローバル変数
************************************************/

//カードの山
//自分のカード
//相手のカード
//勝敗決定フラグ(boolean値)

/***********************************************
  イベントハンドラの割り当て
************************************************/

//ページの読み込みが完了したとき実行する関数を登録
window.addEventListener("load",初期表示);

//「カードを引く」ボタンを押したとき実行する関数を登録
document.querySelector("#ボタンのID").addEventListener("click",カードを引く);

//「勝負する」ボタンを押したとき実行する関数を登録
document.querySelector("#ボタンのID").addEventListener("click",勝負する);

//「もう一回遊ぶ」ボタンを押したとき実行する関数を登録
document.querySelector("#ボタンのID").addEventListener("click",もう一回遊ぶ);

/***********************************************
  イベントハンドラ
************************************************/

//ページ読み込みの関数
function 初期表示(){
  //シャッフル
  //自分がカードを引く
  //相手がカードを引く
  //画面を更新する
}

//「カードを引く」ボタン押したとき実行する関数
function カードを引く(){
  if(勝敗が未決定){
    //自分がカードを引く
    //相手がカードを引く
    //画面を更新する
  }
}

//「勝負する」ボタンを押したとき実行する関数
function 勝負する(){
  if(勝敗が未決定){
  //勝敗を判定する
  //勝敗を画面表示
  //勝敗決定フラグを「決定」に変更
  }
}

//「もう一回遊ぶ」ボタンを押したとき実行する関数
function もう一回遊ぶ(){
  //画面を初期表示に戻す
  //reloadメソッドでページを再読込する
}

/***********************************************
  ゲーム関数
************************************************/

//カードの山をシャッフルする関数
function シャッフル(){
  for(let i = 0; i < 100; i++){
    //山からランダムに選んだ2枚を入れ替える
  }
}

//自分がカードを引く関数
function 自分がカードを引く(){
  if(自分のカードの枚数が4枚以下){
    //カードの山(配列)から1枚取り出す
    //取り出した一枚を自分のカード(配列)に追加する
  }
}

//相手がカードを引く関数
function 相手がカードを引く(){
  if(相手のカードが4枚以下){
    if(考える){
      //カードの山(配列)から1枚取り出す
      //取り出した一枚を相手のカード(配列)に追加する
    }
  }
}

//カードを引くかどうか考える関数
function 考える(){
  //引くか引かないかを戻り値で返す
}

//画面を更新する関数
function 画面を更新する(){
  //自分のカードを表示する
  for(let i = 0; i < 5; i++){
    if(i < 自分のカード枚数){
      //表面のカード画像を表示する
    }else{
      //裏面のカード画像を表示する
    }
  }
  //相手のカードを表示する
  for(let i = 0; i < 5; i++){
    if(i < 相手のカード枚数){
      //表面のカード画像を表示する
    }else{
      //裏面のカード画像を表示する
    }
  }
  //カードの合計を再計算する
}

//勝敗判定する関数
function 勝敗を判定する(){
  //自分のカードの合計を求める
  //相手のカードの合計を求める
  //勝敗を決める
  //勝敗を呼び出し元に返す
}
/***********************************************
  デバッグ関数
************************************************/
function debug(){
  console.log("カードの山",カードの山);
  console.log("自分のカード",自分のカード);
  console.log("相手のカード",相手のカード);
  console.log("勝敗決定フラグ",勝敗決定フラグ);
}
